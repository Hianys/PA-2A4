services:   # Différents services de l'application (Laravel back/front et base de données)

  app:      # Premier service : application Laravel (Apache + PHP)
    build:
      context: .             # Indique que le contexte de build se situe dans le dossier courant (le projet)
      target: prod           # Utilise la cible `prod` définie dans le Dockerfile (multistage build)
    container_name: laravel-app-prod      # Nom du conteneur Docker
    env_file:
      - docker/..env.prod     # Fichier contenant les variables d'environnement spécifiques à la prod
    ports:
      - "8080:80"            # Expose le port 80 du conteneur sur le port 8080 de l’hôte
    depends_on:
      - db                  # Ce conteneur dépend du service `db` (il attend qu’il soit prêt avant de démarrer)
    networks:
      - ecodeli-net         # Connecte le service à un réseau Docker nommé `ecodeli-net`

  db:       # Service base de données : MySQL
    image: mysql:8.0         # Image officielle MySQL version 8.0
    container_name: mysql-ecodeli-prod    # Nom du conteneur MySQL
    restart: always          # Redémarre automatiquement le conteneur s’il crash ou après un reboot
    env_file:
      - docker/..env.prod     # Variables d’environnement pour initialiser MySQL (user, password, etc.)
    volumes:
      - mysql-prod-data:/var/lib/mysql    # Volume Docker pour persister les données MySQL
    networks:
      - ecodeli-net         # Même réseau que l’app pour qu’ils puissent communiquer ensemble

volumes:
  mysql-prod-data:           # Déclaration du volume nommé utilisé pour la base de données

networks:
  ecodeli-net:               # Déclaration du réseau Docker utilisé par tous les services
    driver: bridge           # Utilise le driver `bridge` (réseau local isolé par défaut)
